import numpy as np
import torch
import scipy
import matplotlib.pyplot as plt



h1 = 30
p = 2
q = 1
h2 = 20


def W(t, h=h1):
    m = np.maximum(0, 0.75 * (1 - ((t - np.arange(1, days + 1, 1)) / h) ** 2) / h)
    return np.diag(m)

def Xp(t, p=p, days=100):
    X = np.zeros((days, p + 1))
    for i in range(p + 1):
        X[:, i] = (np.arange(1, days + 1, 1) - t) ** i
    return X

def beta_hat(t, yobs=yobs):
    return np.linalg.inv(Xp(t).T.dot(W(t)).dot(Xp(t))).dot(Xp(t).T).dot(W(t)).dot(yobs)
    
    
def Z(t, q=q): 
    global Tt
    Z = np.zeros((days, 2 * (q + 1)))
    for i in range(q + 1):
        Z[:, i] = (np.arange(1, days + 1, 1) - t) ** i
    for i in range(q+1, 2 * q + 2):
        Z[:, i] = Tt * (np.arange(1, days + 1, 1) - t) ** (i - q - 1)  
    return Z

def e(q=q):
    e = np.zeros((2, 2 * (q + 1)))
    e[0, 0] = 1
    e[1, q + 1] = 1
    return e

U = np.zeros((days, p + 1))
for i in range(days):
    U[i] = beta_hat(i).reshape(1, -1)
    
def a(t):
    return e().dot(np.linalg.inv(Z(t).T.dot(W(t, h=h2)).dot(Z(t)))).dot(Z(t).T).dot(W(t, h=h2)).dot(U[:, 1] + 3.5 * U[:, 0])

a1_ls = np.zeros(100)
a2_ls = np.zeros(100)
for t in range(100):
    tmp = a(t)
    a1_ls[t] = tmp[0]
    a2_ls[t] = tmp[1]
    
plt.plot(a2_ls * Tt + a1_ls)
